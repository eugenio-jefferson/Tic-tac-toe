// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  isOnline  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  gamesAsPlayer1     Game[]           @relation("Player1")
  gamesAsPlayer2     Game[]           @relation("Player2")
  moves              Move[]
  sentInvitations    GameInvitation[] @relation("InvitationFrom")
  receivedInvitations GameInvitation[] @relation("InvitationTo")

  @@map("users")
}

model Game {
  id            Int      @id @default(autoincrement())
  player1Id     Int
  player2Id     Int
  board         String   // JSON string representing the 3x3 board
  currentPlayer Int?     // null when game is finished
  status        GameStatus @default(WAITING)
  winner        Int?     // null for draw or ongoing game
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  player1 User   @relation("Player1", fields: [player1Id], references: [id])
  player2 User   @relation("Player2", fields: [player2Id], references: [id])
  moves   Move[]
  logs    Log[]

  @@map("games")
}

model GameInvitation {
  id         Int                @id @default(autoincrement())
  fromUserId Int
  toUserId   Int
  status     InvitationStatus   @default(PENDING)
  createdAt  DateTime           @default(now())
  expiresAt  DateTime

  // Relationships
  fromUser User @relation("InvitationFrom", fields: [fromUserId], references: [id])
  toUser   User @relation("InvitationTo", fields: [toUserId], references: [id])

  @@map("game_invitations")
}

model Move {
  id        Int      @id @default(autoincrement())
  gameId    Int
  playerId  Int
  position  Int      // 0-8 for board positions
  symbol    String   // 'X' or 'O'
  timestamp DateTime @default(now())

  // Relationships
  game   Game @relation(fields: [gameId], references: [id])
  player User @relation(fields: [playerId], references: [id])

  @@map("moves")
}

model Log {
  id        Int      @id @default(autoincrement())
  type      LogType
  eventType String
  message   String?
  data      String?  // JSON string for additional data
  gameId    Int?     // Optional reference to game
  timestamp DateTime @default(now())

  // Relationships
  game Game? @relation(fields: [gameId], references: [id])

  @@map("logs")
}

enum GameStatus {
  WAITING
  IN_PROGRESS
  FINISHED
  ABANDONED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum LogType {
  EVENT
  ERROR
  GAME_EVENT
}

